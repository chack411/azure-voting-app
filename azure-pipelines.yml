# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger: none

pr:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '5957fe23-a4b2-4786-8dfc-08d2a92809cc'
  containerRegistry: 'akirainaks.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'akirainaks14071f17-auth'

  azureSubscriptionEndpoint: Edtter(bd5c9737-10a5-4178-9b83-fd223f7b4bb4)
  imageRepositoryFront: 'azure-vote-front'
  imageRepositoryBack: 'azure-vote-back'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'
  
  # Name of the new namespace being created to deploy the PR changes.
  k8sNamespaceForPR: '$(system.pullRequest.sourceBranch)'

stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: DockerCompose@0
      displayName: Build services
      inputs:
        action: Build services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)

    - task: DockerCompose@0
      displayName: Push services
      inputs:
        action: Push services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)

    - upload: kubernetes-manifests
      artifact: kubernetes-manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
#    condition: and(succeeded(), not(startsWith(variables['Build.SourceBranch'], 'refs/pull/')))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'chack411azurevotingapp-1016.vote'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: vote
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
              
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: vote
              manifests: |
                $(Pipeline.Workspace)/kubernetes-manifests/storage-resources.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/pod-secrets.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-back-deployment.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-back-service.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-front-deployment.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-front-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepositoryBack):$(tag)
                $(containerRegistry)/$(imageRepositoryFront):$(tag)

  # - deployment: DeployPullRequest
  #   displayName: Deploy Pull request
  #   condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/pull/'))
  #   pool:
  #     vmImage: $(vmImageName)
      
  #   environment: 'chack411azurevotingapp-1016.$(k8sNamespaceForPR)'
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - reviewApp: vote

  #         - task: Kubernetes@1
  #           displayName: 'Create a new namespace for the pull request'
  #           inputs:
  #             command: apply
  #             useConfigurationFile: true
  #             inline: '{ "kind": "Namespace", "apiVersion": "v1", "metadata": { "name": "$(k8sNamespaceForPR)" }}'

  #         - task: KubernetesManifest@0
  #           displayName: Create imagePullSecret
  #           inputs:
  #             action: createSecret
  #             secretName: $(imagePullSecret)
  #             namespace: $(k8sNamespaceForPR)
  #             dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          
  #         - task: KubernetesManifest@0
  #           displayName: Deploy to the new namespace in the Kubernetes cluster
  #           inputs:
  #             action: deploy
  #             namespace: $(k8sNamespaceForPR)
  #             manifests: |
  #               $(Pipeline.Workspace)/manifests/deployment.yml
  #               $(Pipeline.Workspace)/manifests/service.yml
  #             imagePullSecrets: |
  #               $(imagePullSecret)
  #             containers: |
  #               $(containerRegistry)/$(imageRepository):$(tag)
          
  #         - task: Kubernetes@1
  #           name: get
  #           displayName: 'Get services in the new namespace'
  #           continueOnError: true
  #           inputs:
  #             command: get
  #             namespace: $(k8sNamespaceForPR)
  #             arguments: svc
  #             outputFormat: jsonpath='http://{.items[0].status.loadBalancer.ingress[0].ip}:{.items[0].spec.ports[0].port}'
              
  #         # Getting the IP of the deployed service and writing it to a variable for posing comment
  #         - script: |
  #             url="$(get.KubectlOutput)"
  #             message="Your review app has been deployed"
  #             if [ ! -z "$url" -a "$url" != "http://:" ] 
  #             then
  #               message="${message} and is available at $url.<br><br>[Learn More](https://aka.ms/testwithreviewapps) about how to test and provide feedback for the app."
  #             fi
  #             echo "##vso[task.setvariable variable=GITHUB_COMMENT]$message"
