# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- master

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: 'e5dfba4b-ae79-4de3-8f34-85ab3a5b2c45'
  containerRegistry: 'akirainaks.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'akirainaks64f5-auth'

  azureSubscriptionEndpoint: Edtter(bd5c9737-10a5-4178-9b83-fd223f7b4bb4)
  imageRepositoryFront: 'azure-vote-front'
  imageRepositoryBack: 'azure-vote-back'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

stages:

- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:

    - task: DockerCompose@0
      displayName: Build services
      inputs:
        action: Build services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)

    - task: DockerCompose@0
      displayName: Push services
      inputs:
        action: Push services
        azureSubscriptionEndpoint: $(azureSubscriptionEndpoint)
        azureContainerRegistry: $(containerRegistry)
        dockerComposeFile: '**/docker-compose.yaml'
        projectName: $(Build.Repository.Name)
        qualifyImageNames: true
        additionalImageTags: $(Build.BuildId)

    - upload: kubernetes-manifests
      artifact: kubernetes-manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'chack411azurevotingapp.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              namespace: default
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              namespace: default
              manifests: |
                # $(Pipeline.Workspace)/kubernetes-manifests/storage-resources.yaml
                # $(Pipeline.Workspace)/kubernetes-manifests/pod-secrets.yaml
                # $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-back-deployment.yaml
                # $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-back-service.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-front-deployment.yaml
                $(Pipeline.Workspace)/kubernetes-manifests/azure-vote-front-service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                # $(containerRegistry)/$(imageRepositoryBack):$(tag)
                $(containerRegistry)/$(imageRepositoryFront):$(tag)
